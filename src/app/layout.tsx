import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import ServiceWorkerRegister from "@/components/ServiceWorkerRegister";
import InstallBanner from "@/components/InstallBanner";
import Link from "next/link";
import { Suspense } from "react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

function ProfileButton() {
  // Use client-side fetch to avoid SSR cookie complexities
  return (
    <Suspense fallback={null}>
      {/* eslint-disable-next-line react-hooks/rules-of-hooks */}
      {typeof window !== 'undefined' && (
        <ClientProfileButton />
      )}
    </Suspense>
  );
}

function ClientProfileButton() {
  // small client component inline
  // eslint-disable-next-line react-hooks/rules-of-hooks
  const [label, setLabel] = (require('react') as typeof import('react')).useState<string | null>(null);
  // eslint-disable-next-line react-hooks/rules-of-hooks
  (require('react') as typeof import('react')).useEffect(()=>{
    let alive = true;
    (async () => {
      try {
        const r = await fetch('/api/me');
        if (!r.ok) return;
        const me = await r.json();
        if (alive) setLabel((me.displayName||me.handle||'?').slice(0,1).toUpperCase());
      } catch {}
    })();
    return ()=>{ alive=false; };
  }, []);
  if (!label) return null;
  return (
    <Link href="/me" className="fixed top-3 right-3 w-9 h-9 rounded-full bg-green-600 text-white flex items-center justify-center text-sm font-bold" aria-label="Open profile">
      {label}
    </Link>
  );
}

export default function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode; }>) {
  return (
    <html lang="tr">
      <head>
        <link rel="manifest" href="/manifest.webmanifest" />
        <meta name="theme-color" content="#16a34a" />
      </head>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        {children}
        <div className="fixed bottom-2 left-2 z-40">
          {/* eslint-disable-next-line @next/next/no-img-element */}
          <img src="/api/qrcode?text=%2F" alt="QR" width={48} height={48} className="border rounded bg-white shadow opacity-80 hover:opacity-100 transition-opacity" />
        </div>
        <ProfileButton />
        <ServiceWorkerRegister />
        <InstallBanner />
      </body>
    </html>
  );
}
