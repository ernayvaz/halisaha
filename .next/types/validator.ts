// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/ev/[code]/history/page.tsx
{
  const handler = {} as typeof import("../../src/app/ev/[code]/history/page.js")
  handler satisfies AppPageConfig<"/ev/[code]/history">
}

// Validate ../../src/app/ev/[code]/landing/page.tsx
{
  const handler = {} as typeof import("../../src/app/ev/[code]/landing/page.js")
  handler satisfies AppPageConfig<"/ev/[code]/landing">
}

// Validate ../../src/app/ev/[code]/lineup/page.tsx
{
  const handler = {} as typeof import("../../src/app/ev/[code]/lineup/page.js")
  handler satisfies AppPageConfig<"/ev/[code]/lineup">
}

// Validate ../../src/app/ev/[code]/lobby/page.tsx
{
  const handler = {} as typeof import("../../src/app/ev/[code]/lobby/page.js")
  handler satisfies AppPageConfig<"/ev/[code]/lobby">
}

// Validate ../../src/app/ev/[code]/mvp/page.tsx
{
  const handler = {} as typeof import("../../src/app/ev/[code]/mvp/page.js")
  handler satisfies AppPageConfig<"/ev/[code]/mvp">
}

// Validate ../../src/app/ev/[code]/nickname/page.tsx
{
  const handler = {} as typeof import("../../src/app/ev/[code]/nickname/page.js")
  handler satisfies AppPageConfig<"/ev/[code]/nickname">
}

// Validate ../../src/app/ev/[code]/page.tsx
{
  const handler = {} as typeof import("../../src/app/ev/[code]/page.js")
  handler satisfies AppPageConfig<"/ev/[code]">
}

// Validate ../../src/app/ev/[code]/teams/page.tsx
{
  const handler = {} as typeof import("../../src/app/ev/[code]/teams/page.js")
  handler satisfies AppPageConfig<"/ev/[code]/teams">
}

// Validate ../../src/app/ev/landing/page.tsx
{
  const handler = {} as typeof import("../../src/app/ev/landing/page.js")
  handler satisfies AppPageConfig<"/ev/landing">
}

// Validate ../../src/app/me/page.tsx
{
  const handler = {} as typeof import("../../src/app/me/page.js")
  handler satisfies AppPageConfig<"/me">
}

// Validate ../../src/app/page.tsx
{
  const handler = {} as typeof import("../../src/app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../src/app/api/cron/cleanup/route.ts
{
  const handler = {} as typeof import("../../src/app/api/cron/cleanup/route.js")
  handler satisfies RouteHandlerConfig<"/api/cron/cleanup">
}

// Validate ../../src/app/api/cron/match-timers/route.ts
{
  const handler = {} as typeof import("../../src/app/api/cron/match-timers/route.js")
  handler satisfies RouteHandlerConfig<"/api/cron/match-timers">
}

// Validate ../../src/app/api/debug/ping/route.ts
{
  const handler = {} as typeof import("../../src/app/api/debug/ping/route.js")
  handler satisfies RouteHandlerConfig<"/api/debug/ping">
}

// Validate ../../src/app/api/debug/prisma/route.ts
{
  const handler = {} as typeof import("../../src/app/api/debug/prisma/route.js")
  handler satisfies RouteHandlerConfig<"/api/debug/prisma">
}

// Validate ../../src/app/api/debug/smoke/route.ts
{
  const handler = {} as typeof import("../../src/app/api/debug/smoke/route.js")
  handler satisfies RouteHandlerConfig<"/api/debug/smoke">
}

// Validate ../../src/app/api/events/[id]/finish/route.ts
{
  const handler = {} as typeof import("../../src/app/api/events/[id]/finish/route.js")
  handler satisfies RouteHandlerConfig<"/api/events/[id]/finish">
}

// Validate ../../src/app/api/events/[id]/flags/route.ts
{
  const handler = {} as typeof import("../../src/app/api/events/[id]/flags/route.js")
  handler satisfies RouteHandlerConfig<"/api/events/[id]/flags">
}

// Validate ../../src/app/api/events/[id]/participants/[participantId]/route.ts
{
  const handler = {} as typeof import("../../src/app/api/events/[id]/participants/[participantId]/route.js")
  handler satisfies RouteHandlerConfig<"/api/events/[id]/participants/[participantId]">
}

// Validate ../../src/app/api/events/[id]/participants/route.ts
{
  const handler = {} as typeof import("../../src/app/api/events/[id]/participants/route.js")
  handler satisfies RouteHandlerConfig<"/api/events/[id]/participants">
}

// Validate ../../src/app/api/events/[id]/poll/route.ts
{
  const handler = {} as typeof import("../../src/app/api/events/[id]/poll/route.js")
  handler satisfies RouteHandlerConfig<"/api/events/[id]/poll">
}

// Validate ../../src/app/api/events/[id]/route.ts
{
  const handler = {} as typeof import("../../src/app/api/events/[id]/route.js")
  handler satisfies RouteHandlerConfig<"/api/events/[id]">
}

// Validate ../../src/app/api/events/[id]/teams/route.ts
{
  const handler = {} as typeof import("../../src/app/api/events/[id]/teams/route.js")
  handler satisfies RouteHandlerConfig<"/api/events/[id]/teams">
}

// Validate ../../src/app/api/events/route.ts
{
  const handler = {} as typeof import("../../src/app/api/events/route.js")
  handler satisfies RouteHandlerConfig<"/api/events">
}

// Validate ../../src/app/api/me/history/route.ts
{
  const handler = {} as typeof import("../../src/app/api/me/history/route.js")
  handler satisfies RouteHandlerConfig<"/api/me/history">
}

// Validate ../../src/app/api/me/route.ts
{
  const handler = {} as typeof import("../../src/app/api/me/route.js")
  handler satisfies RouteHandlerConfig<"/api/me">
}

// Validate ../../src/app/api/nickname/check/route.ts
{
  const handler = {} as typeof import("../../src/app/api/nickname/check/route.js")
  handler satisfies RouteHandlerConfig<"/api/nickname/check">
}

// Validate ../../src/app/api/notifications/subscribe/route.ts
{
  const handler = {} as typeof import("../../src/app/api/notifications/subscribe/route.js")
  handler satisfies RouteHandlerConfig<"/api/notifications/subscribe">
}

// Validate ../../src/app/api/participants/[id]/role/route.ts
{
  const handler = {} as typeof import("../../src/app/api/participants/[id]/role/route.js")
  handler satisfies RouteHandlerConfig<"/api/participants/[id]/role">
}

// Validate ../../src/app/api/participants/[id]/route.ts
{
  const handler = {} as typeof import("../../src/app/api/participants/[id]/route.js")
  handler satisfies RouteHandlerConfig<"/api/participants/[id]">
}

// Validate ../../src/app/api/polls/[pollId]/vote/route.ts
{
  const handler = {} as typeof import("../../src/app/api/polls/[pollId]/vote/route.js")
  handler satisfies RouteHandlerConfig<"/api/polls/[pollId]/vote">
}

// Validate ../../src/app/api/qrcode/route.ts
{
  const handler = {} as typeof import("../../src/app/api/qrcode/route.js")
  handler satisfies RouteHandlerConfig<"/api/qrcode">
}

// Validate ../../src/app/api/teams/[teamId]/assignments/route.ts
{
  const handler = {} as typeof import("../../src/app/api/teams/[teamId]/assignments/route.js")
  handler satisfies RouteHandlerConfig<"/api/teams/[teamId]/assignments">
}

// Validate ../../src/app/api/teams/[teamId]/positions/route.ts
{
  const handler = {} as typeof import("../../src/app/api/teams/[teamId]/positions/route.js")
  handler satisfies RouteHandlerConfig<"/api/teams/[teamId]/positions">
}

// Validate ../../src/app/api/users/[id]/card/route.ts
{
  const handler = {} as typeof import("../../src/app/api/users/[id]/card/route.js")
  handler satisfies RouteHandlerConfig<"/api/users/[id]/card">
}

// Validate ../../src/app/api/users/anonymous/route.ts
{
  const handler = {} as typeof import("../../src/app/api/users/anonymous/route.js")
  handler satisfies RouteHandlerConfig<"/api/users/anonymous">
}





// Validate ../../src/app/layout.tsx
{
  const handler = {} as typeof import("../../src/app/layout.js")
  handler satisfies LayoutConfig<"/">
}
