// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  handle       String        @unique
  displayName  String
  foot         String?
  pace         Int?          @default(1)
  shoot        Int?          @default(1)
  pass         Int?          @default(1)
  defend       Int?          @default(1)
  devices      Device[]
  participants Participant[]
  badges       Badge[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Device {
  id          String   @id @default(cuid())
  deviceToken String   @unique
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
}

model Event {
  id               String        @id @default(cuid())
  code             String        @unique
  name             String?
  date             DateTime?
  startTime        String?
  durationMinutes  Int?
  status           String        @default("open")
  rosterLocked     Boolean       @default(false)
  lineupLocked     Boolean       @default(false)
  participants     Participant[]
  teams            Team[]
  polls            MVPPoll[]
  snapshots       HistorySnapshot[]
  createdAt        DateTime      @default(now())
}

model Participant {
  id         String   @id @default(cuid())
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    String
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  guestName  String?
  isGuest    Boolean  @default(false)
  role       String   @default("player")
  joinedAt   DateTime @default(now())
  assignments Assignment[]
  positions   LineupPosition[]
  votesCast   MVPVote[]        @relation("Voter")
  votesGot    MVPVote[]        @relation("Target")

  @@index([eventId, userId])
}

model MVPPoll {
  id        String    @id @default(cuid())
  event     Event     @relation(fields: [eventId], references: [id])
  eventId   String    @unique
  startsAt  DateTime
  endsAt    DateTime
  finalized Boolean   @default(false)
  votes     MVPVote[]
}

model MVPVote {
  id                 String       @id @default(cuid())
  poll               MVPPoll      @relation(fields: [pollId], references: [id])
  pollId             String
  voterParticipant   Participant  @relation("Voter", fields: [voterParticipantId], references: [id])
  voterParticipantId String
  targetParticipant  Participant  @relation("Target", fields: [targetParticipantId], references: [id])
  targetParticipantId String

  @@unique([pollId, voterParticipantId])
}

model Badge {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  type    String
  level   Int    @default(1)
  count   Int    @default(1)

  @@unique([userId, type])
}

model HistorySnapshot {
  id        String   @id @default(cuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  snapshot  Json
  createdAt DateTime @default(now())
  ttlAt     DateTime
}

model Team {
  id         String   @id @default(cuid())
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    String
  index      Int      // 1 or 2
  name       String
  color      String   @default("#16a34a")
  formation  String   @default("1-2-2-1")
  assignments Assignment[]
  positions   LineupPosition[]

  @@unique([eventId, index])
}

model Assignment {
  id            String       @id @default(cuid())
  team          Team         @relation(fields: [teamId], references: [id])
  teamId        String
  participant   Participant  @relation(fields: [participantId], references: [id])
  participantId String

  @@unique([teamId, participantId])
}

model LineupPosition {
  id            String       @id @default(cuid())
  team          Team         @relation(fields: [teamId], references: [id])
  teamId        String
  participant   Participant  @relation(fields: [participantId], references: [id])
  participantId String
  x             Float
  y             Float

  @@unique([teamId, participantId])
}
